Ótimo! Para controlar o LED via smartphone usando Wi-Fi, precisaremos modificar o código para que o ESP32 se conecte à sua rede Wi-Fi e crie um servidor web simples.
Materiais Necessários (além dos anteriores):
 * Acesso a uma rede Wi-Fi
 * Um smartphone conectado à mesma rede Wi-Fi
Código (linguagem C++):
#include <WiFi.h>
#include <WebServer.h>

const char* ssid = "SEU_SSID"; // Substitua pelo SSID da sua rede Wi-Fi
const char* password = "SUA_SENHA"; // Substitua pela senha da sua rede Wi-Fi

const int ledPin = 2;
int ledState = LOW;

WebServer server(80);

void handleRoot() {
  String html = "<html><body>";
  html += "<h1>Controle de LED</h1>";
  if (ledState == LOW) {
    html += "<a href='/ligar'><button>Ligar LED</button></a>";
  } else {
    html += "<a href='/desligar'><button>Desligar LED</button></a>";
  }
  html += "</body></html>";
  server.send(200, "text/html", html);
}

void handleLigar() {
  ledState = HIGH;
  digitalWrite(ledPin, ledState);
  server.sendHeader("Location", "/", true);
  server.send(302, "text/plain", ""); // Redireciona para a página principal
}

void handleDesligar() {
  ledState = LOW;
  digitalWrite(ledPin, ledState);
  server.sendHeader("Location", "/", true);
  server.send(302, "text/plain", ""); // Redireciona para a página principal
}

void handleNotFound() {
  server.send(404, "text/plain", "Pagina nao encontrada");
}

void setup() {
  pinMode(ledPin, OUTPUT);
  digitalWrite(ledPin, ledState);

  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Conectando ao Wi-Fi...");
  }

  Serial.println("Conectado ao Wi-Fi!");
  Serial.print("Endereco IP: ");
  Serial.println(WiFi.localIP());

  server.on("/", handleRoot);
  server.on("/ligar", handleLigar);
  server.on("/desligar", handleDesligar);
  server.onNotFound(handleNotFound);

  server.begin();
  Serial.println("Servidor web iniciado");
}

void loop() {
  server.handleClient();
}

Explicação do Código:
 * Inclusão de Bibliotecas:
   * #include <WiFi.h>: Inclui a biblioteca Wi-Fi para conexão à rede.
   * #include <WebServer.h>: Inclui a biblioteca WebServer para criar um servidor web.
 * Credenciais Wi-Fi:
   * const char* ssid = "SEU_SSID";: Substitua "SEU_SSID" pelo nome da sua rede Wi-Fi.
   * const char* password = "SUA_SENHA";: Substitua "SUA_SENHA" pela senha da sua rede Wi-Fi.
 * Configuração do LED:
   * const int ledPin = 2;: Define o pino do LED.
   * int ledState = LOW;: Inicializa o estado do LED como desligado.
 * Servidor Web:
   * WebServer server(80);: Cria um objeto WebServer na porta 80 (porta padrão para HTTP).
 * Funções de Manipulação de Requisições:
   * handleRoot(): Envia a página HTML principal com os botões "Ligar LED" e "Desligar LED".
   * handleLigar(): Liga o LED e redireciona para a página principal.
   * handleDesligar(): Desliga o LED e redireciona para a página principal.
   * handleNotFound(): Envia uma mensagem de erro 404 se a página não for encontrada.
 * Função setup():
   * Configura o pino do LED como saída.
   * Conecta-se à rede Wi-Fi usando as credenciais fornecidas.
   * Imprime o endereço IP do ESP32 no monitor serial.
   * Define os manipuladores de requisições para as diferentes URLs.
   * Inicia o servidor web.
 * Função loop():
   * server.handleClient();: Lida com as requisições dos clientes.
Como usar o código:
 * Substitua "SEU_SSID" e "SUA_SENHA" pelas credenciais da sua rede Wi-Fi.
 * Carregue o código no ESP32.
 * Abra o monitor serial da Arduino IDE para ver o endereço IP atribuído ao ESP32.
 * Abra um navegador no seu smartphone e digite o endereço IP do ESP32.
 * Você verá a página de controle do LED. Clique nos botões para ligar e desligar o LED.
Pontos importantes:
 * Certifique-se de que seu smartphone esteja conectado à mesma rede Wi-Fi que o ESP32.
 * Se você tiver problemas de conexão, verifique as credenciais Wi-Fi e a intensidade do sinal.
Com isso, você terá um controle simples do seu LED via smartphone através da rede Wi-Fi.
